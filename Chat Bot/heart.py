
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from config import VK_API, PASSWORD
import json
from faq import *
from carousel import create_keyboard_two
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from topics import GigResponse
import sqlite3
import datetime
from better_profanity import profanity
from urllib.request import urlretrieve
from email.mime.image import MIMEImage
import requests
from NLP import bert_semantic_similarity as nlp
import shortanswer
from toxic import insult
from buttons import create_keyboard, back
from config import host, user, db_pass, db_name, port
import psycopg2


connection = psycopg2.connect(dbname="History", user='root', password=db_pass, host =host, port=port)
connection.autocommit = True
cursor = connection.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS History (id INTEGER, username TEXT NOT NULL, date TEXT NOT NULL, message TEXT NOT NULL , response TEXT NOT NULL )''')

def send_message(user_id, message, keyboard=None, template=None):
    vk.messages.send(
        user_id=user_id,
        message=message,
        random_id=0,
        keyboard=keyboard,
        template=json.dumps(template) if template is not None else None
    )

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
vk_session = vk_api.VkApi(token=VK_API)
vk = vk_session.get_api()
longpoll = VkLongPoll(vk_session)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
for event in longpoll.listen():
    keyboard = create_keyboard()
    keyboard2 = create_keyboard_two()
    b_back = back()
    if event.type == VkEventType.MESSAGE_NEW and event.to_me:
        user_id = event.user_id
        message = event.text.lower()

        if message == '–Ω–∞—á–∞—Ç—å':
            welcome_message = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø —É–º–Ω—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≥–ª–∞–≤—ã –≥–æ—Ä–æ–¥–∞ –ú–∏—Ä–Ω—ã–π. –ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?'
            send_message(user_id, welcome_message, keyboard)

        elif message == "–æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚ùì":
            send_message(user_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã", template=keyboard2)
            send_message(user_id, "–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ãüëÜ", keyboard)

        elif message == '—Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ üÜò':
            send_message(user_id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ "–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ"')
            send_message(user_id, '–ó–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, —Ç–∞–∫–∂–µ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ—Å–Ω–∏–º–æ–∫(–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)', b_back)
            def received():
                for event in longpoll.listen():
                    if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                        received_message = event.text  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫—É
                        user_id = event.user_id
                        if event.text == "–ù–∞–∑–∞–¥":
                            send_message(user_id, '–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', keyboard)
                            break
                        else:
                            smtp_server = "smtp.yandex.ru"
                            smtp_port = 587  # –ü–æ—Ä—Ç –¥–ª—è TLS
                            username = "tchernenkocon@yandex.ru" #—Å –∫–∞–∫–æ–π –ø–æ—á—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∞
                            password = PASSWORD
                            recipient = "lokrit9@gmail.com" #–∫–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å
                            email_message = MIMEMultipart()
                            email_message["From"] = username
                            email_message["To"] = recipient
                            email_message["Subject"] = "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ"
                            body = received_message
                            email_message.attach(MIMEText(body, "plain"))
                            messages = vk.messages.getHistory(count=5, user_id=user_id)['items']
                            # –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                            for message in messages:
                                if 'attachments' in message:
                                    for attachment in message['attachments']:
                                        if attachment['type'] == 'photo':
                                            # –ü–æ–ª—É—á–µ–Ω–∏–µ URL —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –≤–µ—Ä—Å–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                            photo_url = max(attachment['photo']['sizes'], key=lambda size: size['height'])[
                                                'url']
                                            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                            urlretrieve(photo_url, "pict/downloaded_image.jpg")
                                            print("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ")
                                            break

                            for msg in messages:
                                if 'attachments' in msg:
                                    for attachment in msg['attachments']:
                                        if attachment['type'] == 'photo':
                                            photo_url = max(attachment['photo']['sizes'], key=lambda size: size['height'])['url']
                                            response = requests.get(photo_url)
                                            img = MIMEImage(response.content)
                                            email_message.attach(img)
                                            print("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ –ø–∏—Å—å–º—É")
                                            break

                            server = smtplib.SMTP(smtp_server, smtp_port)
                            server.starttls()  # –ù–∞—á–∞—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                            server.login(username, password)
                            server.send_message(email_message)
                            server.quit()
                            send_message(user_id, '–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', keyboard)
                            break
            received()

        elif message == '–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üìù':
            current_date = datetime.datetime.now().strftime('%Y-%m-%d')
            send_message(user_id, '–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ')
            send_message(user_id, '„Ö§ ', b_back)
            for event in longpoll.listen():
                if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                    if event.text == "–ù–∞–∑–∞–¥":
                        send_message(user_id, '–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', keyboard)
                        break
                    else:
                        request = event.text
                        if 1:
                            id = event.user_id
                            insult(request)
                            if profanity.contains_profanity(request):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤
                                    send_message(user_id,'‚ùóÔ∏è‚ùóÔ∏è–Ø –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å\n–ü—Ä–∏—Å—É—Ç—Å–≤—É—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–ª–æ–≤–∞‚ùóÔ∏è‚ùóÔ∏èÔ∏è',keyboard)
                                    break
                            else:
                                user_get = vk.users.get(user_ids=(id))
                                user_get = user_get[0]
                                first_name = user_get['first_name']  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                last_name = user_get['last_name']  # –§–∞–º–∏–ª–∏—è
                                full_name = str(first_name+last_name)
                                send_message(user_id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ‚ôæÔ∏è‚ôæÔ∏è‚ôæÔ∏è.Ô∏è')

                                link = nlp(event.text)
                                send_message(user_id, f'–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–º–µ: üëâ{GigResponse(request)}üëà\n')
                                short_ans = shortanswer.short_answer(event.text)
                                send_message(user_id, f"üïê –ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:\n {short_ans}")
                                cursor.execute(
                                    f'''INSERT INTO History (id, username, date, message, response) VALUES ('{user_id}','{full_name}', '{current_date}','{request}','{short_ans}')''')
                                send_message(user_id, f'üëâ{link}üëà \n –ü–æ –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤–∞–º –ø–æ–º–æ—á—å!', b_back)

        elif message == "–∏—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π üïë":
            alls = cursor.execute(f'''SELECT date, message ,response FROM History WHERE id='{user_id}' ''')
            send_message(user_id, f"–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π: \n\n")
            all_history = cursor.fetchall()
            for event in all_history:
                date = event[0]
                request = event[1]
                response = event[2]
                send_message(user_id, f'üïë{date}:\n‚ùì–í–∞—à –∑–∞–ø—Ä–æ—Å:  {request}\n‚úèÔ∏è–û—Ç–≤–µ—Ç:  {response} \n \n ',b_back)



        #–î–ª—è —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        elif message == '–æ –∂–∏–ª–∏—â–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö':
            send_message(user_id, question(), keyboard)

        elif message == '–æ –≤—ã–¥–µ–ª–µ–Ω–∏–∏ –∑–µ–º–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤':
            send_message(user_id, question2(), keyboard)

        elif message == '–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∂–∫—Ö':
            send_message(user_id, question3(), keyboard)

        elif message == '—Å–ø–æ—Å–æ–±—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–º –¥–æ–º–æ–º':
            send_message(user_id, question4(), keyboard)

        elif message == '–ø–æ–ª—É—á–µ–Ω–∏–µ –∑–µ–º–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤':
            send_message(user_id, question5(), keyboard)

        elif message == '–ø–æ–º–æ—â—å –±–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–º':
            send_message(user_id, question6(), keyboard)

        elif message == '–ø–æ–º–æ—â—å':
            send_message(user_id, question7(), keyboard)

        elif message == '–ø–ª–∞—Ç–∞ –∑–∞ –∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç':
            send_message(user_id, question8(), keyboard)



        else:
            send_message(user_id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.', keyboard)